{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { PtTask } from '../../../../../core/models/domain';\nimport { EMPTY_STRING } from '../../../../../core/helpers/string-helpers';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\n\nfunction PtItemTasksComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 6)(2, \"div\", 7)(3, \"input\", 8);\n    i0.ɵɵlistener(\"change\", function PtItemTasksComponent_div_7_Template_input_change_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.toggleTapped(task_r1));\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(4, \"input\", 9);\n    i0.ɵɵlistener(\"ngModelChange\", function PtItemTasksComponent_div_7_Template_input_ngModelChange_4_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const task_r1 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(task_r1.title = $event);\n    })(\"ngModelChange\", function PtItemTasksComponent_div_7_Template_input_ngModelChange_4_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.taskTitleChange(task_r1, $event));\n    })(\"blur\", function PtItemTasksComponent_div_7_Template_input_blur_4_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.taskBlurred(task_r1, $event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 10)(6, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function PtItemTasksComponent_div_7_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.taskDelete(task_r1));\n    });\n    i0.ɵɵtext(7, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const task_r1 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"checked\", task_r1.completed)(\"name\", \"checked\" + task_r1.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", task_r1.title)(\"name\", \"tasktitle\" + task_r1.id);\n  }\n}\n\nexport class PtItemTasksComponent {\n  constructor() {\n    this.tasks$ = new BehaviorSubject([]);\n    this.addNewTask = new EventEmitter();\n    this.updateTask = new EventEmitter();\n    this.newTaskTitle = EMPTY_STRING;\n    this.lastUpdatedTitle = EMPTY_STRING;\n  }\n\n  onAddTapped() {\n    const newTitle = this.newTaskTitle.trim();\n\n    if (newTitle.length === 0) {\n      return;\n    }\n\n    const newTask = {\n      title: newTitle,\n      completed: false\n    };\n    this.addNewTask.emit(newTask);\n    this.newTaskTitle = EMPTY_STRING;\n  }\n\n  toggleTapped(task) {\n    const taskUpdate = {\n      task: task,\n      toggle: true\n    };\n    this.updateTask.emit(taskUpdate);\n  }\n\n  taskTitleChange(task, newTitle) {\n    if (task.title === newTitle) {\n      return;\n    }\n\n    this.lastUpdatedTitle = newTitle;\n  }\n\n  taskBlurred(task) {\n    if (task.title === this.lastUpdatedTitle) {\n      return;\n    }\n\n    const taskUpdate = {\n      task: task,\n      toggle: false,\n      newTitle: this.lastUpdatedTitle\n    };\n    this.updateTask.emit(taskUpdate);\n    this.lastUpdatedTitle = EMPTY_STRING;\n  }\n\n  taskDelete(task) {\n    const taskUpdate = {\n      task: task,\n      toggle: false,\n      delete: true\n    };\n    this.updateTask.emit(taskUpdate);\n  }\n\n}\n\nPtItemTasksComponent.ɵfac = function PtItemTasksComponent_Factory(t) {\n  return new (t || PtItemTasksComponent)();\n};\n\nPtItemTasksComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PtItemTasksComponent,\n  selectors: [[\"app-item-tasks\"]],\n  inputs: {\n    tasks$: \"tasks$\"\n  },\n  outputs: {\n    addNewTask: \"addNewTask\",\n    updateTask: \"updateTask\"\n  },\n  decls: 9,\n  vars: 5,\n  consts: [[1, \"form-row\", \"align-items-center\"], [1, \"col-sm-6\"], [\"placeholder\", \"Enter new task...\", \"name\", \"newTask\", 1, \"form-control\", \"pt-text-task-add\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"disabled\", \"click\"], [\"class\", \"input-group mb-3 col-sm-6\", 4, \"ngFor\", \"ngForOf\"], [1, \"input-group\", \"mb-3\", \"col-sm-6\"], [1, \"input-group-prepend\"], [1, \"input-group-text\"], [\"type\", \"checkbox\", \"aria-label\", \"Checkbox for following text input\", 3, \"checked\", \"name\", \"change\"], [\"type\", \"text\", \"aria-label\", \"Text input with checkbox\", 1, \"form-control\", 3, \"ngModel\", \"name\", \"ngModelChange\", \"blur\"], [1, \"input-group-append\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"]],\n  template: function PtItemTasksComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\")(1, \"div\", 0)(2, \"div\", 1)(3, \"input\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function PtItemTasksComponent_Template_input_ngModelChange_3_listener($event) {\n        return ctx.newTaskTitle = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function PtItemTasksComponent_Template_button_click_4_listener() {\n        return ctx.onAddTapped();\n      });\n      i0.ɵɵtext(5, \"Add\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(6, \"hr\");\n      i0.ɵɵtemplate(7, PtItemTasksComponent_div_7_Template, 8, 4, \"div\", 4);\n      i0.ɵɵpipe(8, \"async\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.newTaskTitle);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", !ctx.newTaskTitle);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 3, ctx.tasks$));\n    }\n  },\n  dependencies: [i1.NgForOf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.NgModel, i2.NgForm, i1.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwdC1pdGVtLXRhc2tzLmNvbXBvbmVudC5jc3MifQ== */\"],\n  changeDetection: 0\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","PtTask","EMPTY_STRING","BehaviorSubject","i0","PtItemTasksComponent","constructor","onAddTapped","newTitle","newTaskTitle","trim","length","newTask","title","completed","addNewTask","emit","toggleTapped","task","taskUpdate","toggle","updateTask","taskTitleChange","lastUpdatedTitle","taskBlurred","taskDelete","delete","selectors","inputs","tasks$","outputs","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\eğitim\\KendoRPS\\rpstrackerng\\src\\app\\modules\\backlog\\components\\detail\\item-tasks\\pt-item-tasks.component.ts","C:\\eğitim\\KendoRPS\\rpstrackerng\\src\\app\\modules\\backlog\\components\\detail\\item-tasks\\pt-item-tasks.component.html"],"sourcesContent":["import { Component, Input, ChangeDetectionStrategy, Output, EventEmitter, OnInit } from '@angular/core';\r\n\r\nimport { PtItem, PtTask } from '../../../../../core/models/domain';\r\nimport { PtNewTask, PtTaskUpdate } from '../../../../../shared/models/dto';\r\nimport { EMPTY_STRING } from '../../../../../core/helpers/string-helpers';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'app-item-tasks',\r\n    templateUrl: 'pt-item-tasks.component.html',\r\n    styleUrls: ['pt-item-tasks.component.css'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PtItemTasksComponent {\r\n\r\n    @Input() public tasks$: BehaviorSubject<PtTask[]> = new BehaviorSubject<PtTask[]>([]);\r\n\r\n    @Output() addNewTask = new EventEmitter<PtNewTask>();\r\n    @Output() updateTask = new EventEmitter<PtTaskUpdate>();\r\n\r\n    public newTaskTitle = EMPTY_STRING;\r\n    private lastUpdatedTitle = EMPTY_STRING;\r\n\r\n    public onAddTapped() {\r\n        const newTitle = this.newTaskTitle.trim();\r\n        if (newTitle.length === 0) {\r\n            return;\r\n        }\r\n        const newTask: PtNewTask = {\r\n            title: newTitle,\r\n            completed: false\r\n        };\r\n        this.addNewTask.emit(newTask);\r\n        this.newTaskTitle = EMPTY_STRING;\r\n    }\r\n\r\n    public toggleTapped(task: PtTask) {\r\n        const taskUpdate: PtTaskUpdate = {\r\n            task: task,\r\n            toggle: true\r\n        };\r\n        this.updateTask.emit(taskUpdate);\r\n    }\r\n\r\n    public taskTitleChange(task: PtTask, newTitle: string) {\r\n        if (task.title === newTitle) {\r\n            return;\r\n        }\r\n        this.lastUpdatedTitle = newTitle;\r\n    }\r\n\r\n    public taskBlurred(task: PtTask) {\r\n        if (task.title === this.lastUpdatedTitle) {\r\n            return;\r\n        }\r\n        const taskUpdate: PtTaskUpdate = {\r\n            task: task,\r\n            toggle: false,\r\n            newTitle: this.lastUpdatedTitle\r\n        };\r\n        this.updateTask.emit(taskUpdate);\r\n        this.lastUpdatedTitle = EMPTY_STRING;\r\n    }\r\n\r\n    public taskDelete(task: PtTask) {\r\n        const taskUpdate: PtTaskUpdate = {\r\n            task: task,\r\n            toggle: false,\r\n            delete: true\r\n        };\r\n        this.updateTask.emit(taskUpdate);\r\n    }\r\n}\r\n","<form>\r\n\r\n    <div class=\"form-row align-items-center\">\r\n        <div class=\"col-sm-6\">\r\n            <input [(ngModel)]=\"newTaskTitle\" placeholder=\"Enter new task...\" class=\"form-control pt-text-task-add\"\r\n                name=\"newTask\" />\r\n        </div>\r\n        <button type=\"button\" (click)=\"onAddTapped()\" class=\"btn btn-primary\" [disabled]=\"!newTaskTitle\">Add</button>\r\n    </div>\r\n\r\n    <hr />\r\n\r\n    <div *ngFor=\"let task of tasks$ | async\" class=\"input-group mb-3 col-sm-6\">\r\n        <div class=\"input-group-prepend\">\r\n            <div class=\"input-group-text\">\r\n                <input type=\"checkbox\" [checked]=\"task.completed\" (change)=\"toggleTapped(task)\" aria-label=\"Checkbox for following text input\"\r\n                    [name]=\"'checked' + task.id\" />\r\n            </div>\r\n        </div>\r\n        <input [(ngModel)]=\"task.title\" (ngModelChange)=\"taskTitleChange(task, $event)\" (blur)=\"taskBlurred(task, $event)\"\r\n            type=\"text\" class=\"form-control\" aria-label=\"Text input with checkbox\" [name]=\"'tasktitle' + task.id\" />\r\n\r\n        <div class=\"input-group-append\">\r\n            <button class=\"btn btn-danger\" type=\"button\" (click)=\"taskDelete(task)\">Delete</button>\r\n        </div>\r\n    </div>\r\n</form>\r\n"]},"metadata":{},"sourceType":"module"}