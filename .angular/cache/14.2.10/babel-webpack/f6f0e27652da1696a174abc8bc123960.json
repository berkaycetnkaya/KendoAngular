{"ast":null,"code":"import alignPoint from './align-point';\nimport collision from './collision';\n\nconst fit = function (position, size, viewPortSize) {\n  let output = 0;\n\n  if (position + size > viewPortSize) {\n    output = viewPortSize - (position + size);\n  }\n\n  if (position < 0) {\n    output = -position;\n  }\n\n  return output;\n};\n\nconst flip = function ({\n  offset,\n  size,\n  anchorSize,\n  viewPortSize,\n  anchorAlignPoint,\n  elementAlignPoint,\n  margin\n}) {\n  let output = 0;\n  const isPositionCentered = elementAlignPoint === alignPoint.center || elementAlignPoint === alignPoint.middle;\n  const isOriginCentered = anchorAlignPoint === alignPoint.center || anchorAlignPoint === alignPoint.middle;\n  const marginToAdd = 2 * margin; //2x to keep margin after flip\n\n  if (elementAlignPoint !== anchorAlignPoint && !isPositionCentered && !isOriginCentered) {\n    const isBeforeAnchor = anchorAlignPoint === alignPoint.top || anchorAlignPoint === alignPoint.left;\n\n    if (offset < 0 && isBeforeAnchor) {\n      output = size + anchorSize + marginToAdd;\n\n      if (offset + output + size > viewPortSize) {\n        output = 0; //skip flip\n      }\n    } else if (offset >= 0 && !isBeforeAnchor) {\n      if (offset + size > viewPortSize) {\n        output += -(anchorSize + size + marginToAdd);\n      }\n\n      if (offset + output < 0) {\n        output = 0; //skip flip\n      }\n    }\n  }\n\n  return output;\n};\n\nconst restrictToView = options => {\n  const {\n    anchorRect,\n    anchorAlign,\n    elementRect,\n    elementAlign,\n    collisions,\n    viewPort,\n    margin = {}\n  } = options;\n  const {\n    top: elementTop,\n    left: elementLeft,\n    height: elementHeight,\n    width: elementWidth\n  } = elementRect;\n  const {\n    height: viewPortHeight,\n    width: viewPortWidth\n  } = viewPort;\n  const horizontalMargin = margin.horizontal || 0;\n  const verticalMargin = margin.vertical || 0;\n  let left = 0;\n  let top = 0;\n  const isVerticalFit = collisions.vertical === collision.fit;\n  const isHorizontalFit = collisions.horizontal === collision.fit;\n  const isVerticalFlip = collisions.vertical === collision.flip;\n  const isHorizontalFlip = collisions.horizontal === collision.flip;\n\n  if (isVerticalFit) {\n    top += fit(elementTop, elementHeight, viewPortHeight);\n  }\n\n  if (isHorizontalFit) {\n    left += fit(elementLeft, elementWidth, viewPortWidth);\n  }\n\n  if (isVerticalFlip) {\n    top += flip({\n      margin: verticalMargin,\n      offset: elementTop,\n      size: elementHeight,\n      anchorSize: anchorRect.height,\n      viewPortSize: viewPortHeight,\n      anchorAlignPoint: anchorAlign.vertical,\n      elementAlignPoint: elementAlign.vertical\n    });\n  }\n\n  if (isHorizontalFlip) {\n    left += flip({\n      margin: horizontalMargin,\n      offset: elementLeft,\n      size: elementWidth,\n      anchorSize: anchorRect.width,\n      viewPortSize: viewPortWidth,\n      anchorAlignPoint: anchorAlign.horizontal,\n      elementAlignPoint: elementAlign.horizontal\n    });\n  }\n\n  const flippedVertical = isVerticalFlip && top !== 0;\n  const flippedHorizontal = isHorizontalFlip && left !== 0;\n  const fittedVertical = isVerticalFit && top !== 0;\n  const fittedHorizontal = isHorizontalFit && left !== 0;\n  return {\n    flipped: flippedHorizontal || flippedVertical,\n    fitted: fittedVertical || fittedHorizontal,\n    flip: {\n      horizontal: flippedHorizontal,\n      vertical: flippedVertical\n    },\n    fit: {\n      horizontal: fittedHorizontal,\n      vertical: fittedVertical\n    },\n    offset: {\n      left: left,\n      top: top\n    }\n  };\n};\n\nexport default restrictToView;","map":{"version":3,"names":["alignPoint","collision","fit","position","size","viewPortSize","output","flip","offset","anchorSize","anchorAlignPoint","elementAlignPoint","margin","isPositionCentered","center","middle","isOriginCentered","marginToAdd","isBeforeAnchor","top","left","restrictToView","options","anchorRect","anchorAlign","elementRect","elementAlign","collisions","viewPort","elementTop","elementLeft","height","elementHeight","width","elementWidth","viewPortHeight","viewPortWidth","horizontalMargin","horizontal","verticalMargin","vertical","isVerticalFit","isHorizontalFit","isVerticalFlip","isHorizontalFlip","flippedVertical","flippedHorizontal","fittedVertical","fittedHorizontal","flipped","fitted"],"sources":["C:/eÄŸitim/KendoRPS/rpstrackerng/node_modules/@progress/kendo-popup-common/dist/es2015/restrict-to-view.js"],"sourcesContent":["import alignPoint from './align-point';\nimport collision from './collision';\n\nconst fit = function(position, size, viewPortSize) {\n    let output = 0;\n\n    if (position + size > viewPortSize) {\n        output = viewPortSize - (position + size);\n    }\n\n    if (position < 0) {\n        output = -position;\n    }\n\n    return output;\n};\n\nconst flip = function({ offset, size, anchorSize, viewPortSize, anchorAlignPoint, elementAlignPoint, margin }) {\n    let output = 0;\n\n    const isPositionCentered = elementAlignPoint === alignPoint.center || elementAlignPoint === alignPoint.middle;\n    const isOriginCentered = anchorAlignPoint === alignPoint.center || anchorAlignPoint === alignPoint.middle;\n    const marginToAdd = 2 * margin; //2x to keep margin after flip\n\n    if (elementAlignPoint !== anchorAlignPoint && !isPositionCentered && !isOriginCentered) {\n        const isBeforeAnchor = anchorAlignPoint === alignPoint.top || anchorAlignPoint === alignPoint.left;\n        if (offset < 0 && isBeforeAnchor) {\n            output = size + anchorSize + marginToAdd;\n            if (offset + output + size > viewPortSize) {\n                output = 0; //skip flip\n            }\n        } else if (offset >= 0 && !isBeforeAnchor) {\n            if (offset + size > viewPortSize) {\n                output += -(anchorSize + size + marginToAdd);\n            }\n\n            if (offset + output < 0) {\n                output = 0; //skip flip\n            }\n        }\n    }\n\n    return output;\n};\n\nconst restrictToView = (options) => {\n    const { anchorRect, anchorAlign, elementRect, elementAlign, collisions, viewPort, margin = {} } = options;\n    const { top: elementTop, left: elementLeft, height: elementHeight, width: elementWidth } = elementRect;\n    const { height: viewPortHeight, width: viewPortWidth } = viewPort;\n    const horizontalMargin = margin.horizontal || 0;\n    const verticalMargin = margin.vertical || 0;\n\n    let left = 0;\n    let top = 0;\n\n    const isVerticalFit = collisions.vertical === collision.fit;\n    const isHorizontalFit = collisions.horizontal === collision.fit;\n    const isVerticalFlip = collisions.vertical === collision.flip;\n    const isHorizontalFlip = collisions.horizontal === collision.flip;\n\n    if (isVerticalFit) {\n        top += fit(elementTop, elementHeight, viewPortHeight);\n    }\n\n    if (isHorizontalFit) {\n        left += fit(elementLeft, elementWidth, viewPortWidth);\n    }\n\n    if (isVerticalFlip) {\n        top += flip({\n            margin: verticalMargin,\n            offset: elementTop,\n            size: elementHeight,\n            anchorSize: anchorRect.height,\n            viewPortSize: viewPortHeight,\n            anchorAlignPoint: anchorAlign.vertical,\n            elementAlignPoint: elementAlign.vertical\n        });\n    }\n\n    if (isHorizontalFlip) {\n        left += flip({\n            margin: horizontalMargin,\n            offset: elementLeft,\n            size: elementWidth,\n            anchorSize: anchorRect.width,\n            viewPortSize: viewPortWidth,\n            anchorAlignPoint: anchorAlign.horizontal,\n            elementAlignPoint: elementAlign.horizontal\n        });\n    }\n\n    const flippedVertical = isVerticalFlip && top !== 0;\n    const flippedHorizontal = isHorizontalFlip && left !== 0;\n    const fittedVertical = isVerticalFit && top !== 0;\n    const fittedHorizontal = isHorizontalFit && left !== 0;\n\n    return {\n        flipped: flippedHorizontal || flippedVertical,\n        fitted: fittedVertical || fittedHorizontal,\n        flip: {\n            horizontal: flippedHorizontal,\n            vertical: flippedVertical\n        },\n        fit: {\n            horizontal: fittedHorizontal,\n            vertical: fittedVertical\n        },\n        offset: {\n            left: left,\n            top: top\n        }\n    };\n};\n\nexport default restrictToView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}